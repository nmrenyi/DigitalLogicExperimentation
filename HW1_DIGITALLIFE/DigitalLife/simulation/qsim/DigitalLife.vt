// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/19/2020 17:50:35"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    DigitalLife
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module DigitalLife_vlg_sample_tst(
	clock,
	reset,
	sampler_tx
);
input  clock;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clock or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module DigitalLife_vlg_check_tst (
	even_out,
	even_out_encoded,
	natural_out,
	natural_out_encoded,
	natural_out_hex,
	odd_out,
	odd_out_encoded,
	sampler_rx
);
input [3:0] even_out;
input [6:0] even_out_encoded;
input [3:0] natural_out;
input [6:0] natural_out_encoded;
input [3:0] natural_out_hex;
input [3:0] odd_out;
input [6:0] odd_out_encoded;
input sampler_rx;

reg [3:0] even_out_expected;
reg [6:0] even_out_encoded_expected;
reg [3:0] natural_out_expected;
reg [6:0] natural_out_encoded_expected;
reg [3:0] natural_out_hex_expected;
reg [3:0] odd_out_expected;
reg [6:0] odd_out_encoded_expected;

reg [3:0] even_out_prev;
reg [6:0] even_out_encoded_prev;
reg [3:0] natural_out_prev;
reg [6:0] natural_out_encoded_prev;
reg [3:0] natural_out_hex_prev;
reg [3:0] odd_out_prev;
reg [6:0] odd_out_encoded_prev;

reg [3:0] even_out_expected_prev;
reg [6:0] even_out_encoded_expected_prev;
reg [3:0] natural_out_expected_prev;
reg [6:0] natural_out_encoded_expected_prev;
reg [3:0] natural_out_hex_expected_prev;
reg [3:0] odd_out_expected_prev;
reg [6:0] odd_out_encoded_expected_prev;

reg [3:0] last_even_out_exp;
reg [6:0] last_even_out_encoded_exp;
reg [3:0] last_natural_out_exp;
reg [6:0] last_natural_out_encoded_exp;
reg [3:0] last_natural_out_hex_exp;
reg [3:0] last_odd_out_exp;
reg [6:0] last_odd_out_encoded_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	even_out_prev = even_out;
	even_out_encoded_prev = even_out_encoded;
	natural_out_prev = natural_out;
	natural_out_encoded_prev = natural_out_encoded;
	natural_out_hex_prev = natural_out_hex;
	odd_out_prev = odd_out;
	odd_out_encoded_prev = odd_out_encoded;
end

// update expected /o prevs

always @(trigger)
begin
	even_out_expected_prev = even_out_expected;
	even_out_encoded_expected_prev = even_out_encoded_expected;
	natural_out_expected_prev = natural_out_expected;
	natural_out_encoded_expected_prev = natural_out_encoded_expected;
	natural_out_hex_expected_prev = natural_out_hex_expected;
	odd_out_expected_prev = odd_out_expected;
	odd_out_encoded_expected_prev = odd_out_encoded_expected;
end


// expected even_out[ 3 ]
initial
begin
	even_out_expected[3] = 1'bX;
end 
// expected even_out[ 2 ]
initial
begin
	even_out_expected[2] = 1'bX;
end 
// expected even_out[ 1 ]
initial
begin
	even_out_expected[1] = 1'bX;
end 
// expected even_out[ 0 ]
initial
begin
	even_out_expected[0] = 1'bX;
end 
// expected even_out_encoded[ 6 ]
initial
begin
	even_out_encoded_expected[6] = 1'bX;
end 
// expected even_out_encoded[ 5 ]
initial
begin
	even_out_encoded_expected[5] = 1'bX;
end 
// expected even_out_encoded[ 4 ]
initial
begin
	even_out_encoded_expected[4] = 1'bX;
end 
// expected even_out_encoded[ 3 ]
initial
begin
	even_out_encoded_expected[3] = 1'bX;
end 
// expected even_out_encoded[ 2 ]
initial
begin
	even_out_encoded_expected[2] = 1'bX;
end 
// expected even_out_encoded[ 1 ]
initial
begin
	even_out_encoded_expected[1] = 1'bX;
end 
// expected even_out_encoded[ 0 ]
initial
begin
	even_out_encoded_expected[0] = 1'bX;
end 
// expected natural_out[ 3 ]
initial
begin
	natural_out_expected[3] = 1'bX;
end 
// expected natural_out[ 2 ]
initial
begin
	natural_out_expected[2] = 1'bX;
end 
// expected natural_out[ 1 ]
initial
begin
	natural_out_expected[1] = 1'bX;
end 
// expected natural_out[ 0 ]
initial
begin
	natural_out_expected[0] = 1'bX;
end 
// expected natural_out_encoded[ 6 ]
initial
begin
	natural_out_encoded_expected[6] = 1'bX;
end 
// expected natural_out_encoded[ 5 ]
initial
begin
	natural_out_encoded_expected[5] = 1'bX;
end 
// expected natural_out_encoded[ 4 ]
initial
begin
	natural_out_encoded_expected[4] = 1'bX;
end 
// expected natural_out_encoded[ 3 ]
initial
begin
	natural_out_encoded_expected[3] = 1'bX;
end 
// expected natural_out_encoded[ 2 ]
initial
begin
	natural_out_encoded_expected[2] = 1'bX;
end 
// expected natural_out_encoded[ 1 ]
initial
begin
	natural_out_encoded_expected[1] = 1'bX;
end 
// expected natural_out_encoded[ 0 ]
initial
begin
	natural_out_encoded_expected[0] = 1'bX;
end 
// expected natural_out_hex[ 3 ]
initial
begin
	natural_out_hex_expected[3] = 1'bX;
end 
// expected natural_out_hex[ 2 ]
initial
begin
	natural_out_hex_expected[2] = 1'bX;
end 
// expected natural_out_hex[ 1 ]
initial
begin
	natural_out_hex_expected[1] = 1'bX;
end 
// expected natural_out_hex[ 0 ]
initial
begin
	natural_out_hex_expected[0] = 1'bX;
end 
// expected odd_out[ 3 ]
initial
begin
	odd_out_expected[3] = 1'bX;
end 
// expected odd_out[ 2 ]
initial
begin
	odd_out_expected[2] = 1'bX;
end 
// expected odd_out[ 1 ]
initial
begin
	odd_out_expected[1] = 1'bX;
end 
// expected odd_out[ 0 ]
initial
begin
	odd_out_expected[0] = 1'bX;
end 
// expected odd_out_encoded[ 6 ]
initial
begin
	odd_out_encoded_expected[6] = 1'bX;
end 
// expected odd_out_encoded[ 5 ]
initial
begin
	odd_out_encoded_expected[5] = 1'bX;
end 
// expected odd_out_encoded[ 4 ]
initial
begin
	odd_out_encoded_expected[4] = 1'bX;
end 
// expected odd_out_encoded[ 3 ]
initial
begin
	odd_out_encoded_expected[3] = 1'bX;
end 
// expected odd_out_encoded[ 2 ]
initial
begin
	odd_out_encoded_expected[2] = 1'bX;
end 
// expected odd_out_encoded[ 1 ]
initial
begin
	odd_out_encoded_expected[1] = 1'bX;
end 
// expected odd_out_encoded[ 0 ]
initial
begin
	odd_out_encoded_expected[0] = 1'bX;
end 
// generate trigger
always @(even_out_expected or even_out or even_out_encoded_expected or even_out_encoded or natural_out_expected or natural_out or natural_out_encoded_expected or natural_out_encoded or natural_out_hex_expected or natural_out_hex or odd_out_expected or odd_out or odd_out_encoded_expected or odd_out_encoded)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected even_out = %b | expected even_out_encoded = %b | expected natural_out = %b | expected natural_out_encoded = %b | expected natural_out_hex = %b | expected odd_out = %b | expected odd_out_encoded = %b | ",even_out_expected_prev,even_out_encoded_expected_prev,natural_out_expected_prev,natural_out_encoded_expected_prev,natural_out_hex_expected_prev,odd_out_expected_prev,odd_out_encoded_expected_prev);
	$display("| real even_out = %b | real even_out_encoded = %b | real natural_out = %b | real natural_out_encoded = %b | real natural_out_hex = %b | real odd_out = %b | real odd_out_encoded = %b | ",even_out_prev,even_out_encoded_prev,natural_out_prev,natural_out_encoded_prev,natural_out_hex_prev,odd_out_prev,odd_out_encoded_prev);
`endif
	if (
		( even_out_expected_prev[0] !== 1'bx ) && ( even_out_prev[0] !== even_out_expected_prev[0] )
		&& ((even_out_expected_prev[0] !== last_even_out_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port even_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", even_out_expected_prev);
		$display ("     Real value = %b", even_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_even_out_exp[0] = even_out_expected_prev[0];
	end
	if (
		( even_out_expected_prev[1] !== 1'bx ) && ( even_out_prev[1] !== even_out_expected_prev[1] )
		&& ((even_out_expected_prev[1] !== last_even_out_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port even_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", even_out_expected_prev);
		$display ("     Real value = %b", even_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_even_out_exp[1] = even_out_expected_prev[1];
	end
	if (
		( even_out_expected_prev[2] !== 1'bx ) && ( even_out_prev[2] !== even_out_expected_prev[2] )
		&& ((even_out_expected_prev[2] !== last_even_out_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port even_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", even_out_expected_prev);
		$display ("     Real value = %b", even_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_even_out_exp[2] = even_out_expected_prev[2];
	end
	if (
		( even_out_expected_prev[3] !== 1'bx ) && ( even_out_prev[3] !== even_out_expected_prev[3] )
		&& ((even_out_expected_prev[3] !== last_even_out_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port even_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", even_out_expected_prev);
		$display ("     Real value = %b", even_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_even_out_exp[3] = even_out_expected_prev[3];
	end
	if (
		( even_out_encoded_expected_prev[0] !== 1'bx ) && ( even_out_encoded_prev[0] !== even_out_encoded_expected_prev[0] )
		&& ((even_out_encoded_expected_prev[0] !== last_even_out_encoded_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port even_out_encoded[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", even_out_encoded_expected_prev);
		$display ("     Real value = %b", even_out_encoded_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_even_out_encoded_exp[0] = even_out_encoded_expected_prev[0];
	end
	if (
		( even_out_encoded_expected_prev[1] !== 1'bx ) && ( even_out_encoded_prev[1] !== even_out_encoded_expected_prev[1] )
		&& ((even_out_encoded_expected_prev[1] !== last_even_out_encoded_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port even_out_encoded[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", even_out_encoded_expected_prev);
		$display ("     Real value = %b", even_out_encoded_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_even_out_encoded_exp[1] = even_out_encoded_expected_prev[1];
	end
	if (
		( even_out_encoded_expected_prev[2] !== 1'bx ) && ( even_out_encoded_prev[2] !== even_out_encoded_expected_prev[2] )
		&& ((even_out_encoded_expected_prev[2] !== last_even_out_encoded_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port even_out_encoded[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", even_out_encoded_expected_prev);
		$display ("     Real value = %b", even_out_encoded_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_even_out_encoded_exp[2] = even_out_encoded_expected_prev[2];
	end
	if (
		( even_out_encoded_expected_prev[3] !== 1'bx ) && ( even_out_encoded_prev[3] !== even_out_encoded_expected_prev[3] )
		&& ((even_out_encoded_expected_prev[3] !== last_even_out_encoded_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port even_out_encoded[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", even_out_encoded_expected_prev);
		$display ("     Real value = %b", even_out_encoded_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_even_out_encoded_exp[3] = even_out_encoded_expected_prev[3];
	end
	if (
		( even_out_encoded_expected_prev[4] !== 1'bx ) && ( even_out_encoded_prev[4] !== even_out_encoded_expected_prev[4] )
		&& ((even_out_encoded_expected_prev[4] !== last_even_out_encoded_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port even_out_encoded[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", even_out_encoded_expected_prev);
		$display ("     Real value = %b", even_out_encoded_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_even_out_encoded_exp[4] = even_out_encoded_expected_prev[4];
	end
	if (
		( even_out_encoded_expected_prev[5] !== 1'bx ) && ( even_out_encoded_prev[5] !== even_out_encoded_expected_prev[5] )
		&& ((even_out_encoded_expected_prev[5] !== last_even_out_encoded_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port even_out_encoded[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", even_out_encoded_expected_prev);
		$display ("     Real value = %b", even_out_encoded_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_even_out_encoded_exp[5] = even_out_encoded_expected_prev[5];
	end
	if (
		( even_out_encoded_expected_prev[6] !== 1'bx ) && ( even_out_encoded_prev[6] !== even_out_encoded_expected_prev[6] )
		&& ((even_out_encoded_expected_prev[6] !== last_even_out_encoded_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port even_out_encoded[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", even_out_encoded_expected_prev);
		$display ("     Real value = %b", even_out_encoded_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_even_out_encoded_exp[6] = even_out_encoded_expected_prev[6];
	end
	if (
		( natural_out_expected_prev[0] !== 1'bx ) && ( natural_out_prev[0] !== natural_out_expected_prev[0] )
		&& ((natural_out_expected_prev[0] !== last_natural_out_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port natural_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", natural_out_expected_prev);
		$display ("     Real value = %b", natural_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_natural_out_exp[0] = natural_out_expected_prev[0];
	end
	if (
		( natural_out_expected_prev[1] !== 1'bx ) && ( natural_out_prev[1] !== natural_out_expected_prev[1] )
		&& ((natural_out_expected_prev[1] !== last_natural_out_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port natural_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", natural_out_expected_prev);
		$display ("     Real value = %b", natural_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_natural_out_exp[1] = natural_out_expected_prev[1];
	end
	if (
		( natural_out_expected_prev[2] !== 1'bx ) && ( natural_out_prev[2] !== natural_out_expected_prev[2] )
		&& ((natural_out_expected_prev[2] !== last_natural_out_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port natural_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", natural_out_expected_prev);
		$display ("     Real value = %b", natural_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_natural_out_exp[2] = natural_out_expected_prev[2];
	end
	if (
		( natural_out_expected_prev[3] !== 1'bx ) && ( natural_out_prev[3] !== natural_out_expected_prev[3] )
		&& ((natural_out_expected_prev[3] !== last_natural_out_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port natural_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", natural_out_expected_prev);
		$display ("     Real value = %b", natural_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_natural_out_exp[3] = natural_out_expected_prev[3];
	end
	if (
		( natural_out_encoded_expected_prev[0] !== 1'bx ) && ( natural_out_encoded_prev[0] !== natural_out_encoded_expected_prev[0] )
		&& ((natural_out_encoded_expected_prev[0] !== last_natural_out_encoded_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port natural_out_encoded[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", natural_out_encoded_expected_prev);
		$display ("     Real value = %b", natural_out_encoded_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_natural_out_encoded_exp[0] = natural_out_encoded_expected_prev[0];
	end
	if (
		( natural_out_encoded_expected_prev[1] !== 1'bx ) && ( natural_out_encoded_prev[1] !== natural_out_encoded_expected_prev[1] )
		&& ((natural_out_encoded_expected_prev[1] !== last_natural_out_encoded_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port natural_out_encoded[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", natural_out_encoded_expected_prev);
		$display ("     Real value = %b", natural_out_encoded_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_natural_out_encoded_exp[1] = natural_out_encoded_expected_prev[1];
	end
	if (
		( natural_out_encoded_expected_prev[2] !== 1'bx ) && ( natural_out_encoded_prev[2] !== natural_out_encoded_expected_prev[2] )
		&& ((natural_out_encoded_expected_prev[2] !== last_natural_out_encoded_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port natural_out_encoded[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", natural_out_encoded_expected_prev);
		$display ("     Real value = %b", natural_out_encoded_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_natural_out_encoded_exp[2] = natural_out_encoded_expected_prev[2];
	end
	if (
		( natural_out_encoded_expected_prev[3] !== 1'bx ) && ( natural_out_encoded_prev[3] !== natural_out_encoded_expected_prev[3] )
		&& ((natural_out_encoded_expected_prev[3] !== last_natural_out_encoded_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port natural_out_encoded[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", natural_out_encoded_expected_prev);
		$display ("     Real value = %b", natural_out_encoded_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_natural_out_encoded_exp[3] = natural_out_encoded_expected_prev[3];
	end
	if (
		( natural_out_encoded_expected_prev[4] !== 1'bx ) && ( natural_out_encoded_prev[4] !== natural_out_encoded_expected_prev[4] )
		&& ((natural_out_encoded_expected_prev[4] !== last_natural_out_encoded_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port natural_out_encoded[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", natural_out_encoded_expected_prev);
		$display ("     Real value = %b", natural_out_encoded_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_natural_out_encoded_exp[4] = natural_out_encoded_expected_prev[4];
	end
	if (
		( natural_out_encoded_expected_prev[5] !== 1'bx ) && ( natural_out_encoded_prev[5] !== natural_out_encoded_expected_prev[5] )
		&& ((natural_out_encoded_expected_prev[5] !== last_natural_out_encoded_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port natural_out_encoded[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", natural_out_encoded_expected_prev);
		$display ("     Real value = %b", natural_out_encoded_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_natural_out_encoded_exp[5] = natural_out_encoded_expected_prev[5];
	end
	if (
		( natural_out_encoded_expected_prev[6] !== 1'bx ) && ( natural_out_encoded_prev[6] !== natural_out_encoded_expected_prev[6] )
		&& ((natural_out_encoded_expected_prev[6] !== last_natural_out_encoded_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port natural_out_encoded[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", natural_out_encoded_expected_prev);
		$display ("     Real value = %b", natural_out_encoded_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_natural_out_encoded_exp[6] = natural_out_encoded_expected_prev[6];
	end
	if (
		( natural_out_hex_expected_prev[0] !== 1'bx ) && ( natural_out_hex_prev[0] !== natural_out_hex_expected_prev[0] )
		&& ((natural_out_hex_expected_prev[0] !== last_natural_out_hex_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port natural_out_hex[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", natural_out_hex_expected_prev);
		$display ("     Real value = %b", natural_out_hex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_natural_out_hex_exp[0] = natural_out_hex_expected_prev[0];
	end
	if (
		( natural_out_hex_expected_prev[1] !== 1'bx ) && ( natural_out_hex_prev[1] !== natural_out_hex_expected_prev[1] )
		&& ((natural_out_hex_expected_prev[1] !== last_natural_out_hex_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port natural_out_hex[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", natural_out_hex_expected_prev);
		$display ("     Real value = %b", natural_out_hex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_natural_out_hex_exp[1] = natural_out_hex_expected_prev[1];
	end
	if (
		( natural_out_hex_expected_prev[2] !== 1'bx ) && ( natural_out_hex_prev[2] !== natural_out_hex_expected_prev[2] )
		&& ((natural_out_hex_expected_prev[2] !== last_natural_out_hex_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port natural_out_hex[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", natural_out_hex_expected_prev);
		$display ("     Real value = %b", natural_out_hex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_natural_out_hex_exp[2] = natural_out_hex_expected_prev[2];
	end
	if (
		( natural_out_hex_expected_prev[3] !== 1'bx ) && ( natural_out_hex_prev[3] !== natural_out_hex_expected_prev[3] )
		&& ((natural_out_hex_expected_prev[3] !== last_natural_out_hex_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port natural_out_hex[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", natural_out_hex_expected_prev);
		$display ("     Real value = %b", natural_out_hex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_natural_out_hex_exp[3] = natural_out_hex_expected_prev[3];
	end
	if (
		( odd_out_expected_prev[0] !== 1'bx ) && ( odd_out_prev[0] !== odd_out_expected_prev[0] )
		&& ((odd_out_expected_prev[0] !== last_odd_out_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port odd_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", odd_out_expected_prev);
		$display ("     Real value = %b", odd_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_odd_out_exp[0] = odd_out_expected_prev[0];
	end
	if (
		( odd_out_expected_prev[1] !== 1'bx ) && ( odd_out_prev[1] !== odd_out_expected_prev[1] )
		&& ((odd_out_expected_prev[1] !== last_odd_out_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port odd_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", odd_out_expected_prev);
		$display ("     Real value = %b", odd_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_odd_out_exp[1] = odd_out_expected_prev[1];
	end
	if (
		( odd_out_expected_prev[2] !== 1'bx ) && ( odd_out_prev[2] !== odd_out_expected_prev[2] )
		&& ((odd_out_expected_prev[2] !== last_odd_out_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port odd_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", odd_out_expected_prev);
		$display ("     Real value = %b", odd_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_odd_out_exp[2] = odd_out_expected_prev[2];
	end
	if (
		( odd_out_expected_prev[3] !== 1'bx ) && ( odd_out_prev[3] !== odd_out_expected_prev[3] )
		&& ((odd_out_expected_prev[3] !== last_odd_out_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port odd_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", odd_out_expected_prev);
		$display ("     Real value = %b", odd_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_odd_out_exp[3] = odd_out_expected_prev[3];
	end
	if (
		( odd_out_encoded_expected_prev[0] !== 1'bx ) && ( odd_out_encoded_prev[0] !== odd_out_encoded_expected_prev[0] )
		&& ((odd_out_encoded_expected_prev[0] !== last_odd_out_encoded_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port odd_out_encoded[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", odd_out_encoded_expected_prev);
		$display ("     Real value = %b", odd_out_encoded_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_odd_out_encoded_exp[0] = odd_out_encoded_expected_prev[0];
	end
	if (
		( odd_out_encoded_expected_prev[1] !== 1'bx ) && ( odd_out_encoded_prev[1] !== odd_out_encoded_expected_prev[1] )
		&& ((odd_out_encoded_expected_prev[1] !== last_odd_out_encoded_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port odd_out_encoded[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", odd_out_encoded_expected_prev);
		$display ("     Real value = %b", odd_out_encoded_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_odd_out_encoded_exp[1] = odd_out_encoded_expected_prev[1];
	end
	if (
		( odd_out_encoded_expected_prev[2] !== 1'bx ) && ( odd_out_encoded_prev[2] !== odd_out_encoded_expected_prev[2] )
		&& ((odd_out_encoded_expected_prev[2] !== last_odd_out_encoded_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port odd_out_encoded[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", odd_out_encoded_expected_prev);
		$display ("     Real value = %b", odd_out_encoded_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_odd_out_encoded_exp[2] = odd_out_encoded_expected_prev[2];
	end
	if (
		( odd_out_encoded_expected_prev[3] !== 1'bx ) && ( odd_out_encoded_prev[3] !== odd_out_encoded_expected_prev[3] )
		&& ((odd_out_encoded_expected_prev[3] !== last_odd_out_encoded_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port odd_out_encoded[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", odd_out_encoded_expected_prev);
		$display ("     Real value = %b", odd_out_encoded_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_odd_out_encoded_exp[3] = odd_out_encoded_expected_prev[3];
	end
	if (
		( odd_out_encoded_expected_prev[4] !== 1'bx ) && ( odd_out_encoded_prev[4] !== odd_out_encoded_expected_prev[4] )
		&& ((odd_out_encoded_expected_prev[4] !== last_odd_out_encoded_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port odd_out_encoded[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", odd_out_encoded_expected_prev);
		$display ("     Real value = %b", odd_out_encoded_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_odd_out_encoded_exp[4] = odd_out_encoded_expected_prev[4];
	end
	if (
		( odd_out_encoded_expected_prev[5] !== 1'bx ) && ( odd_out_encoded_prev[5] !== odd_out_encoded_expected_prev[5] )
		&& ((odd_out_encoded_expected_prev[5] !== last_odd_out_encoded_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port odd_out_encoded[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", odd_out_encoded_expected_prev);
		$display ("     Real value = %b", odd_out_encoded_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_odd_out_encoded_exp[5] = odd_out_encoded_expected_prev[5];
	end
	if (
		( odd_out_encoded_expected_prev[6] !== 1'bx ) && ( odd_out_encoded_prev[6] !== odd_out_encoded_expected_prev[6] )
		&& ((odd_out_encoded_expected_prev[6] !== last_odd_out_encoded_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port odd_out_encoded[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", odd_out_encoded_expected_prev);
		$display ("     Real value = %b", odd_out_encoded_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_odd_out_encoded_exp[6] = odd_out_encoded_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module DigitalLife_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg reset;
// wires                                               
wire [3:0] even_out;
wire [6:0] even_out_encoded;
wire [3:0] natural_out;
wire [6:0] natural_out_encoded;
wire [3:0] natural_out_hex;
wire [3:0] odd_out;
wire [6:0] odd_out_encoded;

wire sampler;                             

// assign statements (if any)                          
DigitalLife i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.even_out(even_out),
	.even_out_encoded(even_out_encoded),
	.natural_out(natural_out),
	.natural_out_encoded(natural_out_encoded),
	.natural_out_hex(natural_out_hex),
	.odd_out(odd_out),
	.odd_out_encoded(odd_out_encoded),
	.reset(reset)
);

// clock
always
begin
	clock = 1'b0;
	clock = #5000 1'b1;
	#5000;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #260000 1'b1;
	reset = #120000 1'b0;
end 

DigitalLife_vlg_sample_tst tb_sample (
	.clock(clock),
	.reset(reset),
	.sampler_tx(sampler)
);

DigitalLife_vlg_check_tst tb_out(
	.even_out(even_out),
	.even_out_encoded(even_out_encoded),
	.natural_out(natural_out),
	.natural_out_encoded(natural_out_encoded),
	.natural_out_hex(natural_out_hex),
	.odd_out(odd_out),
	.odd_out_encoded(odd_out_encoded),
	.sampler_rx(sampler)
);
endmodule

