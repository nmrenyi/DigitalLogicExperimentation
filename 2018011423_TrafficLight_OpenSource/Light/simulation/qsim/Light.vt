// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/04/2020 15:29:04"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Light
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Light_vlg_sample_tst(
	clock,
	reset,
	sampler_tx
);
input  clock;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clock or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Light_vlg_check_tst (
	north_cnt,
	north_gre,
	north_red,
	north_yel,
	west_cnt,
	west_gre,
	west_red,
	west_yel,
	sampler_rx
);
input [3:0] north_cnt;
input  north_gre;
input  north_red;
input  north_yel;
input [3:0] west_cnt;
input  west_gre;
input  west_red;
input  west_yel;
input sampler_rx;

reg [3:0] north_cnt_expected;
reg  north_gre_expected;
reg  north_red_expected;
reg  north_yel_expected;
reg [3:0] west_cnt_expected;
reg  west_gre_expected;
reg  west_red_expected;
reg  west_yel_expected;

reg [3:0] north_cnt_prev;
reg  north_gre_prev;
reg  north_red_prev;
reg  north_yel_prev;
reg [3:0] west_cnt_prev;
reg  west_gre_prev;
reg  west_red_prev;
reg  west_yel_prev;

reg [3:0] north_cnt_expected_prev;
reg  north_gre_expected_prev;
reg  north_red_expected_prev;
reg  north_yel_expected_prev;
reg [3:0] west_cnt_expected_prev;
reg  west_gre_expected_prev;
reg  west_red_expected_prev;
reg  west_yel_expected_prev;

reg [3:0] last_north_cnt_exp;
reg  last_north_gre_exp;
reg  last_north_red_exp;
reg  last_north_yel_exp;
reg [3:0] last_west_cnt_exp;
reg  last_west_gre_exp;
reg  last_west_red_exp;
reg  last_west_yel_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	north_cnt_prev = north_cnt;
	north_gre_prev = north_gre;
	north_red_prev = north_red;
	north_yel_prev = north_yel;
	west_cnt_prev = west_cnt;
	west_gre_prev = west_gre;
	west_red_prev = west_red;
	west_yel_prev = west_yel;
end

// update expected /o prevs

always @(trigger)
begin
	north_cnt_expected_prev = north_cnt_expected;
	north_gre_expected_prev = north_gre_expected;
	north_red_expected_prev = north_red_expected;
	north_yel_expected_prev = north_yel_expected;
	west_cnt_expected_prev = west_cnt_expected;
	west_gre_expected_prev = west_gre_expected;
	west_red_expected_prev = west_red_expected;
	west_yel_expected_prev = west_yel_expected;
end


// expected north_cnt[ 3 ]
initial
begin
	north_cnt_expected[3] = 1'bX;
end 
// expected north_cnt[ 2 ]
initial
begin
	north_cnt_expected[2] = 1'bX;
end 
// expected north_cnt[ 1 ]
initial
begin
	north_cnt_expected[1] = 1'bX;
end 
// expected north_cnt[ 0 ]
initial
begin
	north_cnt_expected[0] = 1'bX;
end 

// expected north_gre
initial
begin
	north_gre_expected = 1'bX;
end 

// expected north_red
initial
begin
	north_red_expected = 1'bX;
end 

// expected north_yel
initial
begin
	north_yel_expected = 1'bX;
end 
// expected west_cnt[ 3 ]
initial
begin
	west_cnt_expected[3] = 1'bX;
end 
// expected west_cnt[ 2 ]
initial
begin
	west_cnt_expected[2] = 1'bX;
end 
// expected west_cnt[ 1 ]
initial
begin
	west_cnt_expected[1] = 1'bX;
end 
// expected west_cnt[ 0 ]
initial
begin
	west_cnt_expected[0] = 1'bX;
end 

// expected west_gre
initial
begin
	west_gre_expected = 1'bX;
end 

// expected west_red
initial
begin
	west_red_expected = 1'bX;
end 

// expected west_yel
initial
begin
	west_yel_expected = 1'bX;
end 
// generate trigger
always @(north_cnt_expected or north_cnt or north_gre_expected or north_gre or north_red_expected or north_red or north_yel_expected or north_yel or west_cnt_expected or west_cnt or west_gre_expected or west_gre or west_red_expected or west_red or west_yel_expected or west_yel)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected north_cnt = %b | expected north_gre = %b | expected north_red = %b | expected north_yel = %b | expected west_cnt = %b | expected west_gre = %b | expected west_red = %b | expected west_yel = %b | ",north_cnt_expected_prev,north_gre_expected_prev,north_red_expected_prev,north_yel_expected_prev,west_cnt_expected_prev,west_gre_expected_prev,west_red_expected_prev,west_yel_expected_prev);
	$display("| real north_cnt = %b | real north_gre = %b | real north_red = %b | real north_yel = %b | real west_cnt = %b | real west_gre = %b | real west_red = %b | real west_yel = %b | ",north_cnt_prev,north_gre_prev,north_red_prev,north_yel_prev,west_cnt_prev,west_gre_prev,west_red_prev,west_yel_prev);
`endif
	if (
		( north_cnt_expected_prev[0] !== 1'bx ) && ( north_cnt_prev[0] !== north_cnt_expected_prev[0] )
		&& ((north_cnt_expected_prev[0] !== last_north_cnt_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port north_cnt[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", north_cnt_expected_prev);
		$display ("     Real value = %b", north_cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_north_cnt_exp[0] = north_cnt_expected_prev[0];
	end
	if (
		( north_cnt_expected_prev[1] !== 1'bx ) && ( north_cnt_prev[1] !== north_cnt_expected_prev[1] )
		&& ((north_cnt_expected_prev[1] !== last_north_cnt_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port north_cnt[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", north_cnt_expected_prev);
		$display ("     Real value = %b", north_cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_north_cnt_exp[1] = north_cnt_expected_prev[1];
	end
	if (
		( north_cnt_expected_prev[2] !== 1'bx ) && ( north_cnt_prev[2] !== north_cnt_expected_prev[2] )
		&& ((north_cnt_expected_prev[2] !== last_north_cnt_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port north_cnt[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", north_cnt_expected_prev);
		$display ("     Real value = %b", north_cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_north_cnt_exp[2] = north_cnt_expected_prev[2];
	end
	if (
		( north_cnt_expected_prev[3] !== 1'bx ) && ( north_cnt_prev[3] !== north_cnt_expected_prev[3] )
		&& ((north_cnt_expected_prev[3] !== last_north_cnt_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port north_cnt[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", north_cnt_expected_prev);
		$display ("     Real value = %b", north_cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_north_cnt_exp[3] = north_cnt_expected_prev[3];
	end
	if (
		( north_gre_expected_prev !== 1'bx ) && ( north_gre_prev !== north_gre_expected_prev )
		&& ((north_gre_expected_prev !== last_north_gre_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port north_gre :: @time = %t",  $realtime);
		$display ("     Expected value = %b", north_gre_expected_prev);
		$display ("     Real value = %b", north_gre_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_north_gre_exp = north_gre_expected_prev;
	end
	if (
		( north_red_expected_prev !== 1'bx ) && ( north_red_prev !== north_red_expected_prev )
		&& ((north_red_expected_prev !== last_north_red_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port north_red :: @time = %t",  $realtime);
		$display ("     Expected value = %b", north_red_expected_prev);
		$display ("     Real value = %b", north_red_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_north_red_exp = north_red_expected_prev;
	end
	if (
		( north_yel_expected_prev !== 1'bx ) && ( north_yel_prev !== north_yel_expected_prev )
		&& ((north_yel_expected_prev !== last_north_yel_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port north_yel :: @time = %t",  $realtime);
		$display ("     Expected value = %b", north_yel_expected_prev);
		$display ("     Real value = %b", north_yel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_north_yel_exp = north_yel_expected_prev;
	end
	if (
		( west_cnt_expected_prev[0] !== 1'bx ) && ( west_cnt_prev[0] !== west_cnt_expected_prev[0] )
		&& ((west_cnt_expected_prev[0] !== last_west_cnt_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port west_cnt[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", west_cnt_expected_prev);
		$display ("     Real value = %b", west_cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_west_cnt_exp[0] = west_cnt_expected_prev[0];
	end
	if (
		( west_cnt_expected_prev[1] !== 1'bx ) && ( west_cnt_prev[1] !== west_cnt_expected_prev[1] )
		&& ((west_cnt_expected_prev[1] !== last_west_cnt_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port west_cnt[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", west_cnt_expected_prev);
		$display ("     Real value = %b", west_cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_west_cnt_exp[1] = west_cnt_expected_prev[1];
	end
	if (
		( west_cnt_expected_prev[2] !== 1'bx ) && ( west_cnt_prev[2] !== west_cnt_expected_prev[2] )
		&& ((west_cnt_expected_prev[2] !== last_west_cnt_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port west_cnt[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", west_cnt_expected_prev);
		$display ("     Real value = %b", west_cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_west_cnt_exp[2] = west_cnt_expected_prev[2];
	end
	if (
		( west_cnt_expected_prev[3] !== 1'bx ) && ( west_cnt_prev[3] !== west_cnt_expected_prev[3] )
		&& ((west_cnt_expected_prev[3] !== last_west_cnt_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port west_cnt[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", west_cnt_expected_prev);
		$display ("     Real value = %b", west_cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_west_cnt_exp[3] = west_cnt_expected_prev[3];
	end
	if (
		( west_gre_expected_prev !== 1'bx ) && ( west_gre_prev !== west_gre_expected_prev )
		&& ((west_gre_expected_prev !== last_west_gre_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port west_gre :: @time = %t",  $realtime);
		$display ("     Expected value = %b", west_gre_expected_prev);
		$display ("     Real value = %b", west_gre_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_west_gre_exp = west_gre_expected_prev;
	end
	if (
		( west_red_expected_prev !== 1'bx ) && ( west_red_prev !== west_red_expected_prev )
		&& ((west_red_expected_prev !== last_west_red_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port west_red :: @time = %t",  $realtime);
		$display ("     Expected value = %b", west_red_expected_prev);
		$display ("     Real value = %b", west_red_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_west_red_exp = west_red_expected_prev;
	end
	if (
		( west_yel_expected_prev !== 1'bx ) && ( west_yel_prev !== west_yel_expected_prev )
		&& ((west_yel_expected_prev !== last_west_yel_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port west_yel :: @time = %t",  $realtime);
		$display ("     Expected value = %b", west_yel_expected_prev);
		$display ("     Real value = %b", west_yel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_west_yel_exp = west_yel_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Light_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg reset;
// wires                                               
wire [3:0] north_cnt;
wire north_gre;
wire north_red;
wire north_yel;
wire [3:0] west_cnt;
wire west_gre;
wire west_red;
wire west_yel;

wire sampler;                             

// assign statements (if any)                          
Light i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.north_cnt(north_cnt),
	.north_gre(north_gre),
	.north_red(north_red),
	.north_yel(north_yel),
	.reset(reset),
	.west_cnt(west_cnt),
	.west_gre(west_gre),
	.west_red(west_red),
	.west_yel(west_yel)
);

// clock
always
begin
	clock = 1'b0;
	clock = #5000 1'b1;
	#5000;
end 

// reset
initial
begin
	reset = 1'b0;
end 

Light_vlg_sample_tst tb_sample (
	.clock(clock),
	.reset(reset),
	.sampler_tx(sampler)
);

Light_vlg_check_tst tb_out(
	.north_cnt(north_cnt),
	.north_gre(north_gre),
	.north_red(north_red),
	.north_yel(north_yel),
	.west_cnt(west_cnt),
	.west_gre(west_gre),
	.west_red(west_red),
	.west_yel(west_yel),
	.sampler_rx(sampler)
);
endmodule

